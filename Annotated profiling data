reeja123@SREEJACSE22HPPAVILLIONLAPTOP:/mnt/c/Users/Sreeja/OneDrive/Desktop/des_algo$ callgrind_annotate callgrind.out.2988
--------------------------------------------------------------------------------
Profile data file 'callgrind.out.2988' (creator: callgrind-3.22.0)
--------------------------------------------------------------------------------
I1 cache:
D1 cache:
LL cache:
Timerange: Basic block 0 - 419149304
Trigger: Program termination
Profiled target:  ./des (PID 2988, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:
User annotated:
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir
--------------------------------------------------------------------------------
8,183,351,333 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
3,162,891,320 (38.65%)  desalgo.c:permute [/mnt/c/Users/Sreeja/OneDrive/Desktop/des_algo/des]
1,897,728,768 (23.19%)  desalgo.c:xor [/mnt/c/Users/Sreeja/OneDrive/Desktop/des_algo/des]
1,469,938,950 (17.96%)  desalgo.c:left_shift [/mnt/c/Users/Sreeja/OneDrive/Desktop/des_algo/des]
1,375,650,608 (16.81%)  desalgo.c:sbox_substitution [/mnt/c/Users/Sreeja/OneDrive/Desktop/des_algo/des]
   93,391,672 ( 1.14%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/usr/lib/x86_64-linux-gnu/libc.so.6]
   74,764,161 ( 0.91%)  desalgo.c:generate_keys [/mnt/c/Users/Sreeja/OneDrive/Desktop/des_algo/des]
   60,191,112 ( 0.74%)  desalgo.c:des_encrypt [/mnt/c/Users/Sreeja/OneDrive/Desktop/des_algo/des]

--------------------------------------------------------------------------------
-- Auto-annotated source: desalgo.c
--------------------------------------------------------------------------------
Ir

-- line 136 ----------------------------------------
            .
            .           // Number of left shifts per round
            .           int SHIFTS[] = {
            .               1, 1, 2, 2, 2, 2, 2, 2,
            .               1, 2, 2, 2, 2, 2, 2, 1
            .           };
            .
            .           // Permutation function
   22,619,226 ( 0.28%)  void permute(int *input, int *output, int *table, int n) {
  581,827,542 ( 7.11%)      for(int i = 0; i < n; i++)
2,545,519,284 (31.11%)          output[i] = input[table[i]-1];
   12,925,268 ( 0.16%)  }
            .
            .           // Left rotate
   18,247,518 ( 0.22%)  void left_shift(int *key_half, int shifts) {
            .               int temp[28];
  178,420,176 ( 2.18%)      for(int i = 0; i < 28; i++)
1,248,941,232 (15.26%)          temp[i] = key_half[(i + shifts) % 28];
   12,165,012 ( 0.15%)      memcpy(key_half, temp, sizeof(temp));
   48,660,048 ( 0.59%)  => ???:0x0000000000109090 (2,027,502x)
   12,165,012 ( 0.15%)  }
            .
            .           // XOR function
   14,192,416 ( 0.17%)  void xor(int *a, int *b, int *out, int n) {
  334,535,520 ( 4.09%)      for(int i = 0; i < n; i++)
1,540,890,880 (18.83%)          out[i] = a[i] ^ b[i];
    8,109,952 ( 0.10%)  }
            .
            .           // S-box substitution
    5,068,720 ( 0.06%)  void sbox_substitution(int *input, int *output) {
   28,384,832 ( 0.35%)      for(int i = 0; i < 8; i++) {
  194,638,848 ( 2.38%)          int row = (input[i*6]<<1) + input[i*6+5];
  413,607,552 ( 5.05%)          int col = (input[i*6+1]<<3) + (input[i*6+2]<<2) + (input[i*6+3]<<1) + input[i*6+4];
  113,539,328 ( 1.39%)          int val = S_BOX[i][row][col];
  129,759,232 ( 1.59%)          for(int j = 0; j < 4; j++)
  486,597,120 ( 5.95%)              output[i*4 + j] = (val >> (3-j)) & 1;
            .               }
    4,054,976 ( 0.05%)  }
            .
            .           // DES f-function
   10,137,440 ( 0.12%)  void feistel(int *R, int *K, int *output) {
            .               int expanded[48], xored[48], sbox_out[32];
    6,082,464 ( 0.07%)      permute(R, expanded, E, 48);
1,086,733,568 (13.28%)  => desalgo.c:permute (1,013,744x)
    6,082,464 ( 0.07%)      xor(expanded, K, xored, 48);
1,135,393,280 (13.87%)  => desalgo.c:xor (1,013,744x)
    5,068,720 ( 0.06%)      sbox_substitution(xored, sbox_out);
1,375,650,608 (16.81%)  => desalgo.c:sbox_substitution (1,013,744x)
    6,082,464 ( 0.07%)      permute(sbox_out, output, P, 32);
  729,895,680 ( 8.92%)  => desalgo.c:permute (1,013,744x)
    6,082,464 ( 0.07%)  }
            .
            .           // Key schedule generation
      570,240 ( 0.01%)  void generate_keys(int *key, int keys[16][48]) {
            .               int permuted_key[56], C[28], D[28];
      380,160 ( 0.00%)      permute(key, permuted_key, PC1, 56);
   79,073,280 ( 0.97%)  => desalgo.c:permute (63,360x)
    1,774,080 ( 0.02%)      memcpy(C, permuted_key, 28 * sizeof(int));
      443,520 ( 0.01%)      memcpy(D, permuted_key + 28, 28 * sizeof(int));
    1,520,640 ( 0.02%)  => ???:0x0000000000109090 (63,360x)
            .
    3,294,690 ( 0.04%)      for(int i = 0; i < 16; i++) {
    9,123,759 ( 0.11%)          left_shift(C, SHIFTS[i]);
  759,299,499 ( 9.28%)  => desalgo.c:left_shift (1,013,751x)
    9,123,759 ( 0.11%)          left_shift(D, SHIFTS[i]);
  759,299,499 ( 9.28%)  => desalgo.c:left_shift (1,013,751x)
            .
            .                   int CD[56];
   28,385,028 ( 0.35%)          memcpy(CD, C, 28 * sizeof(int));
    7,096,257 ( 0.09%)          memcpy(CD + 28, D, 28 * sizeof(int));
   24,330,024 ( 0.30%)  => ???:0x0000000000109090 (1,013,751x)
   14,192,514 ( 0.17%)          permute(CD, keys[i], PC2, 48);
1,086,740,936 (13.28%)  => desalgo.c:permute (1,013,751x)
            .               }
      380,154 ( 0.00%)  }
            .
            .           // Full DES encryption
      760,320 ( 0.01%)  void des_encrypt(int *plaintext, int *key, int *ciphertext) {
            .               int IPtext[64], FPtext[64];
            .               int L[17][32], R[17][32], temp[32];
            .               int keys[16][48];
            .
      380,160 ( 0.00%)      permute(plaintext, IPtext, IP, 64);
   90,224,640 ( 1.10%)  => desalgo.c:permute (63,360x)
            .
    2,027,520 ( 0.02%)      memcpy(L[0], IPtext, 32 * sizeof(int));
      443,520 ( 0.01%)      memcpy(R[0], IPtext + 32, 32 * sizeof(int));
    1,520,640 ( 0.02%)  => ???:0x0000000000109090 (63,360x)
            .
      316,800 ( 0.00%)      generate_keys(key, keys);
2,785,028,039 (34.03%)  => desalgo.c:generate_keys (63,360x)
            .
    3,294,668 ( 0.04%)      for(int i = 1; i <= 16; i++) {
   15,206,160 ( 0.19%)          memcpy(L[i], R[i-1], 32 * sizeof(int));
   24,329,856 ( 0.30%)  => ???:0x0000000000109090 (1,013,744x)
   19,261,136 ( 0.24%)          feistel(R[i-1], keys[i-1], temp);
4,367,209,152 (53.37%)  => desalgo.c:feistel (1,013,744x)
   15,206,160 ( 0.19%)          xor(L[i-1], temp, R[i], 32);
  762,335,488 ( 9.32%)  => desalgo.c:xor (1,013,744x)
            .               }
            .
            .               int preoutput[64];
    2,027,488 ( 0.02%)      memcpy(preoutput, R[16], 32 * sizeof(int));
      506,872 ( 0.01%)      memcpy(preoutput + 32, L[16], 32 * sizeof(int));
    1,520,616 ( 0.02%)  => ???:0x0000000000109090 (63,359x)
            .
      380,154 ( 0.00%)      permute(preoutput, ciphertext, FP, 64);
   90,223,216 ( 1.10%)  => desalgo.c:permute (63,359x)
      380,154 ( 0.00%)  }
            .
            .           // Convert hex to binary array
           10 ( 0.00%)  void hex_to_bin(char *hex, int *bin) {
          104 ( 0.00%)      for (int i = 0; i < 16; i++) {
          492 ( 0.00%)          int val = (hex[i] >= 'A') ? (hex[i] - 'A' + 10) : (hex[i] - '0');
          512 ( 0.00%)          for (int j = 0; j < 4; j++)
        1,920 ( 0.00%)              bin[i*4 + j] = (val >> (3 - j)) & 1;
            .               }
            8 ( 0.00%)  }
            .
            .           // Convert binary array to hex string
            .           void bin_to_hex(int *bin, char *hex) {
            .               for (int i = 0; i < 16; i++) {
            .                   int val = 0;
            .                   for (int j = 0; j < 4; j++)
            .                       val = (val << 1) + bin[i*4 + j];
            .                   hex[i] = (val < 10) ? (val + '0') : (val - 10 + 'A');
            .               }
            .               hex[16] = '\0';
            .           }
            .
            7 ( 0.00%)  int main() {
            5 ( 0.00%)      char plain_hex[17] = "0123456789ABCDEF";
            5 ( 0.00%)      char key_hex[17] =   "133457799BBCDFF1";
            .
            .               int plaintext[64], key[64], ciphertext[64];
            .               char cipher_hex[17];
            .
            5 ( 0.00%)      hex_to_bin(plain_hex, plaintext);
        1,523 ( 0.00%)  => desalgo.c:hex_to_bin (1x)
            5 ( 0.00%)      hex_to_bin(key_hex, key);
        1,523 ( 0.00%)  => desalgo.c:hex_to_bin (1x)
            .
            1 ( 0.00%)      int num_iterations = 1000000; // Number of times you want to run the DES encryption
      253,441 ( 0.00%)  for (int i = 0; i < num_iterations; i++) {
      380,160 ( 0.00%)      des_encrypt(plaintext, key, ciphertext);
8,182,582,759 (99.99%)  => desalgo.c:des_encrypt (63,360x)
            .           }
            .
            .               bin_to_hex(ciphertext, cipher_hex);
            .
            .               printf("Plaintext : %s\n", plain_hex);
            .               printf("Key       : %s\n", key_hex);
            .               printf("Ciphertext: %s\n", cipher_hex);
            .
-- line 267 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir
--------------------------------------------------------------------------------
8,081,337,610 (98.75%)  events annotated

